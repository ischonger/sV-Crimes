# 0.0001837114     0.0001022125
# 0.0004178568     0.0001637638
rm     <- matrix(nrow = 10, ncol = 2)# result matrix
for(i in 1:10) {
rm[i,] <- compare(simulation(), simulation())
}
b0m <- mean(rm[,1])# beta0 mean
b1m <- mean(rm[,2])# beta1 mean
b0m
b1m
betas.I  <- t(betas.dm)%*%diag(betas.dvm)%*%betas.dm
set.seed(seed)
c <- crimes.data[sample(1:amount), ]
c.dm <- data.frame(cbind(c$crimes, c$density))
colnames(c.dm) <- c("crimes", "density")
model <- mDensity
amount <- 30
repeats <- 20
seed <- 685465468
set.seed(seed)
c <- crimes.data[sample(1:amount), ]
c.dm <- data.frame(cbind(c$crimes, c$density))
colnames(c.dm) <- c("crimes", "density")
betas <- matrix(ncol = 2, nrow = repeats); colnames(betas) <- c("beta0.hat", "beta1.hat")
for(i in 1:repeats) {
c.tdm <- c.dm[sample(1:dim(c.dm)[1],sample(3:dim(c.dm)[1])), ] # test design-matrix
m <- glm.nb(crimes~density, data = c.tdm)
betas[i,] <- m$coefficients
p <- rnegbin(dim(c.tdm)[1], mu = predict(m, type = "response"), theta = m$call$init.theta)
plot(c.tdm$density, p)
points(c.tdm$density, c.tdm$crimes, col = 2)
}
var(betas)
c.cov <- cov(betas)
betas.dm  <- cbind(c.cov[,1], c.cov[,2])
betas.dvm <- c(var(betas)[1,1], var(betas)[2,2]) # diagonale varianz-matrix
betas.I  <- t(betas.dm)%*%diag(betas.dvm)%*%betas.dm
betas.I
betas.I <- solve(betas.I)
betas.I
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 30, repeats = 30)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 30)
Sys.sleep(2)
betas2 <- simulation(model = m1, seed = sample(1:100000, 1), amount = 10, repeats = 30)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
betas.hat <- rnorm(betas.I)
betas.hat
betas.hat <- rnorm(betas, betas.I )
betas.hat
betas.hat <- rnorm(betas.I)
betas.hat
betas.hat <- rnorm(betas, betas.I)
betas.hat
c.cov
rnorm(betas.I)
simulation <- function(model = mDensity, amount = 30, repeats = 20, seed = 26031409) {
set.seed(seed)
# w채hle stichprobenumfang
c <- crimes.data[sample(1:amount), ]
# baue design-matrix
c.dm <- data.frame(cbind(c$crimes, c$density))
colnames(c.dm) <- c("crimes", "density")
# simuliere mehrfache pseudobeobachtungen
betas <- matrix(ncol = 2, nrow = repeats); colnames(betas) <- c("beta0.hat", "beta1.hat")
for(i in 1:repeats) {
c.tdm <- c.dm[sample(1:dim(c.dm)[1],sample(3:dim(c.dm)[1])), ] # test design-matrix
m <- glm.nb(crimes~density, data = c.tdm)
betas[i,] <- m$coefficients
p <- rnegbin(dim(c.tdm)[1], mu = predict(m, type = "response"), theta = m$call$init.theta)
plot(c.tdm$density, p)
points(c.tdm$density, c.tdm$crimes, col = 2)
}
var(betas)
c.cov <- cov(betas)
# berechne asymptotische kovarianzmatrix
## berechne Designmatrix X: X = cbind(beta0, beta1)
betas.dm  <- cbind(c.cov[,1], c.cov[,2])
## berechne fisher-informationsmatrix: I(beta) = X^t V X, X ist Designmatrix, V ist diag(Vars)
betas.dvm <- c(var(betas)[1,1], var(betas)[2,2]) # diagonale varianz-matrix
betas.I  <- t(betas.dm)%*%diag(betas.dvm)%*%betas.dm
betas.I <- solve(betas.I)
betas.hat <- rnorm(betas, betas.I)
md <- abs(as.matrix(c.cov) - betas.I) # matrix deviation
#print(md)
return(cbind(md[1,1], md[2,2]))
}
simulation()
md <- abs(as.matrix(c.cov) - betas.hat) # matrix deviation
betas.hat <- rnorm(betas.I)
simulation <- function(model = mDensity, amount = 30, repeats = 20, seed = 26031409) {
set.seed(seed)
# w채hle stichprobenumfang
c <- crimes.data[sample(1:amount), ]
# baue design-matrix
c.dm <- data.frame(cbind(c$crimes, c$density))
colnames(c.dm) <- c("crimes", "density")
# simuliere mehrfache pseudobeobachtungen
betas <- matrix(ncol = 2, nrow = repeats); colnames(betas) <- c("beta0.hat", "beta1.hat")
for(i in 1:repeats) {
c.tdm <- c.dm[sample(1:dim(c.dm)[1],sample(3:dim(c.dm)[1])), ] # test design-matrix
m <- glm.nb(crimes~density, data = c.tdm)
betas[i,] <- m$coefficients
p <- rnegbin(dim(c.tdm)[1], mu = predict(m, type = "response"), theta = m$call$init.theta)
plot(c.tdm$density, p)
points(c.tdm$density, c.tdm$crimes, col = 2)
}
var(betas)
c.cov <- cov(betas)
# berechne asymptotische kovarianzmatrix
## berechne Designmatrix X: X = cbind(beta0, beta1)
betas.dm  <- cbind(c.cov[,1], c.cov[,2])
## berechne fisher-informationsmatrix: I(beta) = X^t V X, X ist Designmatrix, V ist diag(Vars)
betas.dvm <- c(var(betas)[1,1], var(betas)[2,2]) # diagonale varianz-matrix
betas.I  <- t(betas.dm)%*%diag(betas.dvm)%*%betas.dm
betas.I <- solve(betas.I)
betas.hat <- rnorm(betas.I)
md <- abs(as.matrix(c.cov) - betas.hat) # matrix deviation
#print(md)
return(cbind(md[1,1], md[2,2]))
}
simulation()
simulation()
simulation(model = m1)
simulation <- function(model = mDensity, amount = 30, repeats = 20, seed = 26031409) {
set.seed(seed)
# w채hle stichprobenumfang
c <- crimes.data[sample(1:amount), ]
# baue design-matrix
c.dm <- data.frame(cbind(c$crimes, c$density))
colnames(c.dm) <- c("crimes", "density")
# simuliere mehrfache pseudobeobachtungen
betas <- matrix(ncol = 2, nrow = repeats); colnames(betas) <- c("beta0.hat", "beta1.hat")
for(i in 1:repeats) {
c.tdm <- c.dm[sample(1:dim(c.dm)[1],sample(3:dim(c.dm)[1])), ] # test design-matrix
m <- glm.nb(crimes~density, data = c.tdm)
betas[i,] <- m$coefficients
p <- rnegbin(dim(c.tdm)[1], mu = predict(m, type = "response"), theta = m$call$init.theta)
plot(c.tdm$density, p)
points(c.tdm$density, c.tdm$crimes, col = 2)
}
var(betas)
c.cov <- cov(betas)
# berechne asymptotische kovarianzmatrix
## berechne Designmatrix X: X = cbind(beta0, beta1)
betas.dm  <- cbind(c.cov[,1], c.cov[,2])
## berechne fisher-informationsmatrix: I(beta) = X^t V X, X ist Designmatrix, V ist diag(Vars)
betas.dvm <- c(var(betas)[1,1], var(betas)[2,2]) # diagonale varianz-matrix
betas.I  <- t(betas.dm)%*%diag(betas.dvm)%*%betas.dm
betas.I <- solve(betas.I)
betas.hat <- rnorm(betas.I)
md <- abs(as.matrix(c.cov) - betas.hat) # matrix deviation
#print(md)
#return(cbind(md[1,1], md[2,2]))
return(md)
}
simulation(model = m1)
simulation(model = m1)
simulation(model = m1, seed = 96845)
simulation(model = m1, seed = 986543)
simulation(model = m1, seed = 986543, repeats = 100)
simulation(model = m1, seed = 646535, repeats = 100)
simulation(model = m1, seed = 646535, repeats = 100, amount = 90)
simulation(model = m1, seed = 646535, repeats = 100, amount = 90)
simulation(model = m1, seed = 9685, repeats = 100, amount = 90)
simulation(model = mDensity, seed = 9685, repeats = 100, amount = 90)
simulation(model = mDensity, seed = 684652, repeats = 100, amount = 90)
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = mDensity, seed = sample(1:100000, 1))
Sys.sleep(2)
betas2 <- simulation(model = mDensity, seed = sample(1:100000, 1), amount = 90, repeats = 100)
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = mDensity, seed = sample(1:100000, 1))
Sys.sleep(2)
betas2 <- simulation(model = mDensity, seed = sample(1:100000, 1))
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
c <- c(0.3774675, 1.0353158)
par(mfrow=c(1,1))
abline
abline(c)
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = mDensity, seed = sample(1:100000, 1))
Sys.sleep(2)
betas2 <- simulation(model = mDensity, seed = sample(1:100000, 1))
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
compare()
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = mDensity, seed = sample(1:100000, 1))
Sys.sleep(2)
betas2 <- simulation(model = mDensity, seed = sample(1:100000, 1))
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
compare()
compare <- function(loops = 10) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = mDensity, seed = sample(1:100000, 1))
Sys.sleep(2)
betas2 <- simulation(model = mDensity, seed = sample(1:100000, 1, amount = 3, repeats = 20))
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
p <- rnegbin(dim(c.tdm)[1], mu = predict(m, type = "response"), theta = m$call$init.theta)
p
plot(c.tdm$density, p)
plot(c.tdm$density, p, xlab = "Dichte", ylab = "Verbrechen", pch = 16)
points(c.tdm$density, c.tdm$crimes, col = 2, pch = 16)
abline(c(1.177870, 1.005777))
betas[i,]
abline(betas[i,])
plot(c.tdm$density, p, xlab = "Dichte", ylab = "Verbrechen", pch = 16)
points(c.tdm$density, c.tdm$crimes, col = 2, pch = 16)
simulation <- function(model = mDensity, amount = 30, repeats = 20, seed = 26031409) {
set.seed(seed)
# w채hle stichprobenumfang
c <- crimes.data[sample(1:amount), ]
# baue design-matrix
c.dm <- data.frame(cbind(c$crimes, c$density))
colnames(c.dm) <- c("crimes", "density")
# simuliere mehrfache pseudobeobachtungen
betas <- matrix(ncol = 2, nrow = repeats); colnames(betas) <- c("beta0.hat", "beta1.hat")
for(i in 1:repeats) {
c.tdm <- c.dm[sample(1:dim(c.dm)[1],sample(3:dim(c.dm)[1])), ] # test design-matrix
m <- glm.nb(crimes~density, data = c.tdm)
betas[i,] <- m$coefficients
p <- rnegbin(dim(c.tdm)[1], mu = predict(m, type = "response"), theta = m$call$init.theta)
plot(c.tdm$density, p, xlab = "Dichte", ylab = "Verbrechen", pch = 16)
points(c.tdm$density, c.tdm$crimes, col = 2, pch = 16)
abline(betas[i,])
}
var(betas)
c.cov <- cov(betas)
# berechne asymptotische kovarianzmatrix
## berechne Designmatrix X: X = cbind(beta0, beta1)
betas.dm  <- cbind(c.cov[,1], c.cov[,2])
## berechne fisher-informationsmatrix: I(beta) = X^t V X, X ist Designmatrix, V ist diag(Vars)
betas.dvm <- c(var(betas)[1,1], var(betas)[2,2]) # diagonale varianz-matrix
betas.I  <- t(betas.dm)%*%diag(betas.dvm)%*%betas.dm
betas.I <- solve(betas.I)
betas.hat <- rnorm(betas.I)
md <- abs(as.matrix(c.cov) - betas.hat) # matrix deviation
#print(md)
return(cbind(md[1,1], md[2,2]))
}
simulation(model = m1, seed = 986543)
simulation(model = m1, seed = 651)
simulation(model = mDensity, seed = 651)
simulation <- function(model = mDensity, amount = 30, repeats = 20, seed = 26031409) {
set.seed(seed)
# w채hle stichprobenumfang
c <- crimes.data[sample(1:amount), ]
# baue design-matrix
c.dm <- data.frame(cbind(c$crimes, c$density))
colnames(c.dm) <- c("crimes", "density")
# simuliere mehrfache pseudobeobachtungen
betas <- matrix(ncol = 2, nrow = repeats); colnames(betas) <- c("beta0.hat", "beta1.hat")
for(i in 1:repeats) {
c.tdm <- c.dm[sample(1:dim(c.dm)[1],sample(3:dim(c.dm)[1])), ] # test design-matrix
m <- glm.nb(crimes~density, data = c.tdm)
betas[i,] <- m$coefficients
p <- rnegbin(dim(c.tdm)[1], mu = predict(m, type = "response"), theta = m$call$init.theta)
plot(c.tdm$density, p, xlab = "Dichte", ylab = "Verbrechen", pch = 16)
points(c.tdm$density, c.tdm$crimes, col = 2, pch = 16)
abline(betas[i,])
}
var(betas)
c.cov <- cov(betas)
# berechne asymptotische kovarianzmatrix
## berechne Designmatrix X: X = cbind(beta0, beta1)
betas.dm  <- cbind(c.cov[,1], c.cov[,2])
## berechne fisher-informationsmatrix: I(beta) = X^t V X, X ist Designmatrix, V ist diag(Vars)
betas.dvm <- c(var(betas)[1,1], var(betas)[2,2]) # diagonale varianz-matrix
betas.I  <- t(betas.dm)%*%diag(betas.dvm)%*%betas.dm
betas.I <- solve(betas.I)
betas.hat <- rnorm(betas.I)
md <- abs(as.matrix(c.cov) - betas.hat) # matrix deviation
#print(md)
return(cbind(md[1,1], md[2,2]))
}
simulation(model = mDensity, seed = 651)
simulation(model = mDensity, seed = 651)
compare <- function(loops = 10, a2 = 3) {
rm <- matrix(ncol = 4, nrow = loops)
for(i in 1:loops) {
betas1 <- simulation(model = mDensity, seed = sample(1:100000, 1))
Sys.sleep(2)
betas2 <- simulation(model = mDensity, seed = sample(1:100000, 1, amount = 3, repeats = 20))
rm[i,1] <- betas1[1]
rm[i,2] <- betas1[2]
rm[i,3] <- betas2[1]
rm[i,4] <- betas2[2]
}
return(c(mean(rm[,3]) / mean(rm[,1]),  mean(rm[,4]) / mean(rm[,2])))
}
simulation <- function(model = mDensity, amount = 30, repeats = 20, seed = 26031409) {
set.seed(seed)
# w채hle stichprobenumfang
c <- crimes.data[sample(1:amount), ]
# baue design-matrix
c.dm <- data.frame(cbind(c$crimes, c$density))
colnames(c.dm) <- c("crimes", "density")
# simuliere mehrfache pseudobeobachtungen
betas <- matrix(ncol = 2, nrow = repeats); colnames(betas) <- c("beta0.hat", "beta1.hat")
for(i in 1:repeats) {
c.tdm <- c.dm[sample(1:dim(c.dm)[1],sample(3:dim(c.dm)[1])), ] # test design-matrix
m <- glm.nb(crimes~density, data = c.tdm)
betas[i,] <- m$coefficients
p <- rnegbin(dim(c.tdm)[1], mu = predict(m, type = "response"), theta = m$call$init.theta)
plot(c.tdm$density, p, xlab = "Dichte", ylab = "Verbrechen", pch = 16)
points(c.tdm$density, c.tdm$crimes, col = 2, pch = 16)
abline(betas[i,])
}
var(betas)
c.cov <- cov(betas)
# berechne asymptotische kovarianzmatrix
## berechne Designmatrix X: X = cbind(beta0, beta1)
betas.dm  <- cbind(c.cov[,1], c.cov[,2])
## berechne fisher-informationsmatrix: I(beta) = X^t V X, X ist Designmatrix, V ist diag(Vars)
betas.dvm <- c(var(betas)[1,1], var(betas)[2,2]) # diagonale varianz-matrix
betas.I  <- t(betas.dm)%*%diag(betas.dvm)%*%betas.dm
betas.I <- solve(betas.I)
betas.hat <- rnorm(betas.I)
md <- abs(as.matrix(c.cov) - betas.hat) # matrix deviation
#print(md)
return(cbind(md[1,1], md[2,2]))
}
simulation(model = mDensity, seed = 685132)
simulation(model = mDensity, seed = 685132)
simulation <- function(model = mDensity, amount = 30, repeats = 20, seed = 26031409) {
set.seed(seed)
# w채hle stichprobenumfang
c <- crimes.data[sample(1:amount), ]
# baue design-matrix
c.dm <- data.frame(cbind(c$crimes, c$density))
colnames(c.dm) <- c("crimes", "density")
# simuliere mehrfache pseudobeobachtungen
betas <- matrix(ncol = 2, nrow = repeats); colnames(betas) <- c("beta0.hat", "beta1.hat")
for(i in 1:repeats) {
c.tdm <- c.dm[sample(1:dim(c.dm)[1],sample(3:dim(c.dm)[1])), ] # test design-matrix
m <- glm.nb(crimes~density, data = c.tdm)
betas[i,] <- m$coefficients
p <- rnegbin(dim(c.tdm)[1], mu = predict(m, type = "response"), theta = m$call$init.theta)
plot(c.tdm$density, p, xlab = "Dichte", ylab = "Verbrechen", pch = 16)
points(c.tdm$density, c.tdm$crimes, col = 2, pch = 16)
abline(betas[i,], col = 3, lwd = 5)
}
var(betas)
c.cov <- cov(betas)
# berechne asymptotische kovarianzmatrix
## berechne Designmatrix X: X = cbind(beta0, beta1)
betas.dm  <- cbind(c.cov[,1], c.cov[,2])
## berechne fisher-informationsmatrix: I(beta) = X^t V X, X ist Designmatrix, V ist diag(Vars)
betas.dvm <- c(var(betas)[1,1], var(betas)[2,2]) # diagonale varianz-matrix
betas.I  <- t(betas.dm)%*%diag(betas.dvm)%*%betas.dm
betas.I <- solve(betas.I)
betas.hat <- rnorm(betas.I)
md <- abs(as.matrix(c.cov) - betas.hat) # matrix deviation
#print(md)
return(cbind(md[1,1], md[2,2]))
}
simulation(model = mDensity, seed = 98646)
betas[i,]*100
betas[i,]
simulation <- function(model = mDensity, amount = 30, repeats = 20, seed = 26031409) {
set.seed(seed)
# w채hle stichprobenumfang
c <- crimes.data[sample(1:amount), ]
# baue design-matrix
c.dm <- data.frame(cbind(c$crimes, c$density))
colnames(c.dm) <- c("crimes", "density")
# simuliere mehrfache pseudobeobachtungen
betas <- matrix(ncol = 2, nrow = repeats); colnames(betas) <- c("beta0.hat", "beta1.hat")
for(i in 1:repeats) {
c.tdm <- c.dm[sample(1:dim(c.dm)[1],sample(3:dim(c.dm)[1])), ] # test design-matrix
m <- glm.nb(crimes~density, data = c.tdm)
betas[i,] <- m$coefficients
p <- rnegbin(dim(c.tdm)[1], mu = predict(m, type = "response"), theta = m$call$init.theta)
plot(c.tdm$density, p, xlab = "Dichte", ylab = "Verbrechen", pch = 16)
points(c.tdm$density, c.tdm$crimes, col = 2, pch = 16)
abline(betas[i,]*100, col = 3, lwd = 5)
}
var(betas)
c.cov <- cov(betas)
# berechne asymptotische kovarianzmatrix
## berechne Designmatrix X: X = cbind(beta0, beta1)
betas.dm  <- cbind(c.cov[,1], c.cov[,2])
## berechne fisher-informationsmatrix: I(beta) = X^t V X, X ist Designmatrix, V ist diag(Vars)
betas.dvm <- c(var(betas)[1,1], var(betas)[2,2]) # diagonale varianz-matrix
betas.I  <- t(betas.dm)%*%diag(betas.dvm)%*%betas.dm
betas.I <- solve(betas.I)
betas.hat <- rnorm(betas.I)
md <- abs(as.matrix(c.cov) - betas.hat) # matrix deviation
#print(md)
return(cbind(md[1,1], md[2,2]))
}
simulation(model = mDensity, seed = 98646)
abline(c(150, 2000), col = 3, lwd = 5)
abline(c(150, 1000), col = 3, lwd = 5)
abline(c(200, 1000), col = 3, lwd = 5)
abline(c(300, 1000), col = 4, lwd = 5)
abline(c(5, 0), col = 4, lwd = 5)
abline(c(100, 0), col = 4, lwd = 5)
abline(c(200, 0), col = 5, lwd = 5)
abline(c(200, 500), col = 6, lwd = 5)
abline(c(betas[i,1], betas[i,2]), col = 6, lwd = 5)
abline(c(betas[i,1]*100, betas[i,2]), col = 6, lwd = 5)
abline(c(betas[i,1]*100, betas[i,2]), col = 7, lwd = 5)
abline(c(betas[i,1]*500, betas[i,2]), col = 8, lwd = 5)
abline(c(betas[i,1]*1000, betas[i,2]), col = 8, lwd = 5)
abline(c(betas[i,1]*4, betas[i,2]), col = 9, lwd = 5)
simulation <- function(model = mDensity, amount = 30, repeats = 20, seed = 26031409) {
set.seed(seed)
# w채hle stichprobenumfang
c <- crimes.data[sample(1:amount), ]
# baue design-matrix
c.dm <- data.frame(cbind(c$crimes, c$density))
colnames(c.dm) <- c("crimes", "density")
# simuliere mehrfache pseudobeobachtungen
betas <- matrix(ncol = 2, nrow = repeats); colnames(betas) <- c("beta0.hat", "beta1.hat")
for(i in 1:repeats) {
c.tdm <- c.dm[sample(1:dim(c.dm)[1],sample(3:dim(c.dm)[1])), ] # test design-matrix
m <- glm.nb(crimes~density, data = c.tdm)
betas[i,] <- m$coefficients
p <- rnegbin(dim(c.tdm)[1], mu = predict(m, type = "response"), theta = m$call$init.theta)
plot(c.tdm$density, p, xlab = "Dichte", ylab = "Verbrechen", pch = 16)
points(c.tdm$density, c.tdm$crimes, col = 2, pch = 16)
#abline(c(betas[i,1]*4, betas[i,2]), col = 9, lwd = 5)
}
var(betas)
c.cov <- cov(betas)
# berechne asymptotische kovarianzmatrix
## berechne Designmatrix X: X = cbind(beta0, beta1)
betas.dm  <- cbind(c.cov[,1], c.cov[,2])
## berechne fisher-informationsmatrix: I(beta) = X^t V X, X ist Designmatrix, V ist diag(Vars)
betas.dvm <- c(var(betas)[1,1], var(betas)[2,2]) # diagonale varianz-matrix
betas.I  <- t(betas.dm)%*%diag(betas.dvm)%*%betas.dm
betas.I <- solve(betas.I)
betas.hat <- rnorm(betas.I)
md <- abs(as.matrix(c.cov) - betas.hat) # matrix deviation
#print(md)
return(cbind(md[1,1], md[2,2]))
}
simulation(model = mDensity, seed = 98646)
simulation(model = mDensity, seed = 98654)
simulation(model = mDensity, seed = 74535)
simulation(model = mDensity, seed = 98465)
par(mfrow=c(1,2))
simulation(model = mDensity, seed = 98465)
simulation(model = mDensity, seed = 9865451)
simulation(model = mDensity, seed = 1)
par(mfrow=c(1,2))
plot(1.10)
plot.new()
